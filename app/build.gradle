plugins {
    id 'com.android.application'
    id 'kotlin-android'

    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id "com.google.protobuf" version "0.8.17"
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "ticketchain.mobile.worker"
        minSdk 29
        targetSdk 31
        versionCode 1
        versionName "1.0"

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    sourceSets.main.proto.srcDirs += "src/main/proto"
}

dependencies {


    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'


    // Jetpack compose

    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"

    // Tooling support (Previews, etc.)
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:$compose_version"
    // Material Design
    implementation "androidx.compose.material:material:$compose_version"
    // Material design icons
    implementation "androidx.compose.material:material-icons-core:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    // Integration with activities
    implementation 'androidx.activity:activity-compose:1.4.0'
    // Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.4.0'
    // Integration with observables
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.compose.runtime:runtime-rxjava2:$compose_version"
    // Animation stuff
    implementation "androidx.compose.animation:animation:$compose_version"

    // Compose Navigation
    implementation "androidx.navigation:navigation-compose:$nav_compose_version"

    // Hilt for dependency injection
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Ktor (HTTP CLIENT)
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-android:$ktor_version"
    implementation "io.ktor:ktor-client-jackson:$ktor_version"

    // DataStore
    implementation "androidx.datastore:datastore:$datastore_version"
    implementation "com.google.protobuf:protobuf-javalite:3.18.0"

    // Config Json
    implementation 'com.sksamuel.hoplite:hoplite-json:1.4.0'

    // Image loading
    implementation "io.coil-kt:coil-compose:1.4.0"

    //Barcode model
    implementation "com.google.mlkit:barcode-scanning:16.1.1"

    //CameraX
    implementation "androidx.camera:camera-camera2:1.1.0-alpha04"
    implementation "androidx.camera:camera-lifecycle:1.1.0-alpha04"
    implementation "androidx.camera:camera-view:1.0.0-alpha24"
}

// allow references to generated code
kapt {
    correctErrorTypes = true
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.14.0"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}